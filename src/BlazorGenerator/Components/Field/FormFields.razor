@typeparam T

@if (IsTableCell)
{
  var link = Field.Href?.Invoke(Data) ?? "";
  var style = "";
  var fldStyle = Field.TextStyle?.Invoke(Data) ?? BlazorGenerator.Enum.TextStyle.Normal;
  switch (fldStyle)
  {
    case BlazorGenerator.Enum.TextStyle.Normal:
      style = "";
      break;
    case BlazorGenerator.Enum.TextStyle.Bold:
      style = "font-weight: bold;";
      break;
    case BlazorGenerator.Enum.TextStyle.Italic:
      style = "font-style: italic;";
      break;
    case BlazorGenerator.Enum.TextStyle.Underline:
      style = "text-decoration: underline;";
      break;
    case BlazorGenerator.Enum.TextStyle.Strikethrough:
      style = "text-decoration: line-through;";
      break;
  }
  var color = Field.Color?.Invoke(Data);
  if (color != null)
    style += "color: " + color.ToAttributeValue() + ";";
  @if (string.IsNullOrEmpty(link))
  {
    if (Field.FieldType == typeof(Type))
    {
      <FluentIcon Value="@((Field.InternalGet(Data) as Type)?.ToFluentIcon())"></FluentIcon>
    }
    else if (Field.FieldType == typeof(bool))
    {
      <FluentCheckbox Value="@(Convert.ToBoolean(Field.InternalGet(Data)))" ReadOnly="true" />
    }
    else
    {
      <span title="@Field.InternalGet(Data)" style="@style">@Field.InternalGet(Data)</span>
    }
  }
  else
  {
    <a href="@link" title="@Field.InternalGet(Data)" style="@style">
      @if (Field.FieldType == typeof(Type))
      {
        <FluentIcon Value="@((Field.InternalGet(Data) as Type)?.ToFluentIcon())"></FluentIcon>
      }
      else
      {
        @Field.InternalGet(Data)
      }
    </a>
  }
}
else
{
  @if (ShowLabel)
  {
    <FluentInputLabel ForId="@Id" Label="@Field.Caption"
                      AriaLabel="@Field.Caption" Required="@Field.Required"
                      id="@(Id+"-Label")"
                      Title="@(Field.Tooltip ?? Field.Caption)" />

    <div style="flex-grow: 1; margin-bottom: calc(var(--design-unit)* 1px);"></div>
  }

  @if (Field.FieldType == typeof(bool))
  {
    <FluentCheckbox Value="@(Convert.ToBoolean(Field.InternalGet(Data)))" ValueChanged="(val) => Field.InternalSet(Data, val)" ChildContent="@DrillDownOrLookup(this)" @onclick="GenericOnClick"
                    @attributes="@commonAttributes" Placeholder="@Field.PlaceHolder" />
  }
  else if (Field.FieldType == typeof(short))
  {
    <FluentNumberField TValue="short" Value="@(Convert.ToInt16(Field.InternalGet(Data)))" ValueChanged="@((val) => Field.InternalSet(Data, val))" ChildContent="@DrillDownOrLookup(this)" @onclick="GenericOnClick"
                       @attributes="@commonAttributes" Placeholder="@Field.PlaceHolder" />
  }
  else if (Field.FieldType == typeof(ushort))
  {
    <FluentNumberField TValue="ushort" Value="@(Convert.ToUInt16(Field.InternalGet(Data)))" ValueChanged="@((val) => Field.InternalSet(Data, val))" ChildContent="@DrillDownOrLookup(this)" @onclick="GenericOnClick"
                       @attributes="@commonAttributes" Placeholder="@Field.PlaceHolder" />
  }
  else if (Field.FieldType == typeof(int))
  {
    <FluentNumberField TValue="int" Value="@(Convert.ToInt32(Field.InternalGet(Data)))" ValueChanged="@((val) => Field.InternalSet(Data, val))" ChildContent="@DrillDownOrLookup(this)" @onclick="GenericOnClick"
                       @attributes="@commonAttributes" Placeholder="@Field.PlaceHolder" />
  }
  else if (Field.FieldType == typeof(uint))
  {
    <FluentNumberField TValue="uint" Value="@(Convert.ToUInt32(Field.InternalGet(Data)))" ValueChanged="@((val) => Field.InternalSet(Data, val))" ChildContent="@DrillDownOrLookup(this)" @onclick="GenericOnClick"
                       @attributes="@commonAttributes" Placeholder="@Field.PlaceHolder" />
  }
  else if (Field.FieldType == typeof(long))
  {
    <FluentNumberField TValue="long" Value="@(Convert.ToInt64(Field.InternalGet(Data)))" ValueChanged="@((val) => Field.InternalSet(Data, val))" ChildContent="@DrillDownOrLookup(this)" @onclick="GenericOnClick"
                       @attributes="@commonAttributes" Placeholder="@Field.PlaceHolder" />
  }
  else if (Field.FieldType == typeof(ulong))
  {
    <FluentNumberField TValue="ulong" Value="@(Convert.ToUInt64(Field.InternalGet(Data)))" ValueChanged="@((val) => Field.InternalSet(Data, val))" ChildContent="@DrillDownOrLookup(this)" @onclick="GenericOnClick"
                       @attributes="@commonAttributes" Placeholder="@Field.PlaceHolder" />
  }
  else if (Field.FieldType == typeof(float))
  {
    <FluentNumberField TValue="float" Value="@(Convert.ToSingle(Field.InternalGet(Data)))" ValueChanged="@((val) => Field.InternalSet(Data, val))" ChildContent="@DrillDownOrLookup(this)" @onclick="GenericOnClick"
                       @attributes="@commonAttributes" Placeholder="@Field.PlaceHolder" />
  }
  else if (Field.FieldType == typeof(double))
  {
    <FluentNumberField TValue="double" Value="@(Convert.ToDouble(Field.InternalGet(Data)))" ValueChanged="@((val) => Field.InternalSet(Data, val))" ChildContent="@DrillDownOrLookup(this)" @onclick="GenericOnClick"
                       @attributes="@commonAttributes" Placeholder="@Field.PlaceHolder" />
  }
  else if (Field.FieldType == typeof(decimal))
  {
    <FluentNumberField TValue="decimal" Value="@(Convert.ToDecimal(Field.InternalGet(Data)))" ValueChanged="@((val) => Field.InternalSet(Data, val))" ChildContent="@DrillDownOrLookup(this)" @onclick="GenericOnClick"
                       @attributes="@commonAttributes" Placeholder="@Field.PlaceHolder" />
  }
  else if ((Field.FieldType == typeof(string)))
  {
    <FluentTextField Value="@Field.InternalGet(Data)?.ToString()" ValueChanged="(val) => Field.InternalSet(Data, val)" ChildContent="@DrillDownOrLookup(this)" @onclick="GenericOnClick"
                     TextFieldType="@Field.TextFieldType" @attributes="@commonAttributes" Placeholder="@Field.PlaceHolder" />

  }
  else if (Field.FieldType == typeof(DateTime))
  {
    <FluentDatePicker @attributes="@commonAttributes" Value="@(Convert.ToDateTime(Field.InternalGet(Data)))" ValueChanged="@((val) => Field.InternalSet(Data, val!))" ChildContent="@DrillDownOrLookup(this)" @onclick="GenericOnClick" Placeholder="@Field.PlaceHolder" />
  }
  else if (Field.FieldType == typeof(Type))
  {
    <FluentIcon Value="@((Field.InternalGet(Data) as Type)?.ToFluentIcon())"></FluentIcon>
  }

  else
  {
    @if (Field.FieldType.IsEnum)
    {
      var values = Enum.GetNames(Field.FieldType);
      commonAttributes["Appearance"] = Appearance.Filled;

      <FluentSelect Items=@values
                    OptionText="@(val => ReflectionUtilites.GetEnumCaption(Field.FieldType.GetMember(val).FirstOrDefault()) ?? val)"
                    OptionValue="@(val => val)"
                    Value="@( Enum.GetName(Field.FieldType, Field.InternalGet(Data)!))"
                    ValueChanged="(val) => Field.InternalSet(Data, Enum.Parse(Field.FieldType, val))"
                    Placeholder="@Field.PlaceHolder"
                    @attributes="@commonAttributes" />

    }
    else
    {
      <p>Not defined @Field.FieldType.ToString()</p>
    }
  }
  @if (HasLookup)
  {
    var values = Field.OnLookup?.Invoke(Data) ?? new Dictionary<object, string>();
    <FluentMenu Anchor="@Id" @bind-Open="LookupOpen" HorizontalPosition="HorizontalPosition.End" Width="200px" Anchored="true">
      @foreach (var item in values)
      {
        <FluentMenuItem OnClick="@((e) => Field.InternalSet(Data, item.Key))">
          @((MarkupString)item.Value.ToString())
        </FluentMenuItem>
      }
    </FluentMenu>
  }

}


@code {

  RenderFragment DrillDownOrLookup(FormFields<T> self) => __builder =>
  {
    @if (self.HasDrillDown)
    {
      <FluentIcon Value="@(new Icons.Regular.Size16.MoreHorizontal())" Color="@Color.Neutral" Slot="end" OnClick="@(() => { self.Field.InternalDrillDown(self.Data); })" />
    }
    else if (self.HasLookup)
    {
      <FluentIcon Value="@(new Icons.Regular.Size16.ChevronDown())" Color="@Color.Neutral" Slot="end" OnClick="@(() => { self.LookupOpen = !self.LookupOpen; })" />
    }
  };
}
