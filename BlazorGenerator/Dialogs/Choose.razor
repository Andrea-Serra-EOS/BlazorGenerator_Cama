<Modal @ref="currentModal" Closing="@OnModalClosing">
    <ModalContent Centered Size="ModalSize.Default">
        <ModalHeader TextAlignment="TextAlignment.Center" TextWeight="TextWeight.Bold">
            @Header
            <CloseButton></CloseButton>
        </ModalHeader>
        <ModalBody Padding="Padding.Is0">
            <ListGroup Flush Mode="ListGroupMode.Selectable" SelectedItem="@modalselection" SelectedItemChanged="@OnModalSelection">
                @if (Options != null)
                {
                    @foreach (var item in Options)
                    {
                        <ListGroupItem Name="@item" TextAlignment="TextAlignment.Center">@item</ListGroupItem>
                    }
                }
            </ListGroup>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Block Clicked="(async ()=> await OnModalSelection(null))">@Cancel</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {

    Modal currentModal;
    string modalselection;
    string Header { get; set; }
    string Cancel { get; set; }
    string[] Options { get; set; }
    bool _initialOpen;
    bool _cancelClose;
    TaskCompletionSource<string> taskCompletionSource = new();

    private Task OnModalClosing(ModalClosingEventArgs e)
    {
        e.Cancel = _cancelClose || e.CloseReason != CloseReason.UserClosing;
        return Task.CompletedTask;
    }

    async Task OnModalSelection(string selection)
    {
        modalselection = selection;
        if (!_initialOpen)
        {
            _cancelClose = false;
            await currentModal.Hide();
            taskCompletionSource.SetResult(selection);
        }
    }

    public async Task<string> ChoseAsync(string header, string[] options, string cancelText = "Cancel")
    {
        taskCompletionSource = new();
        Header = header;
        Cancel = cancelText;
        _initialOpen = true;
        Options = options;
        modalselection = null;
        await currentModal.Show();
        _initialOpen = false;
        return await taskCompletionSource.Task;
    }
}
