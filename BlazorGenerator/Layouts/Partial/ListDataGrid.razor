@typeparam T
<div class="GridContainer">
  @if ((VisibleFields != null) && (VisibleFields.Count > 0))
  {
    <FluentDataGrid Items="@FilteredData"
                    TGridItem="T"
                    ResizableColumns="true"
                    GridTemplateColumns="@GetCssGridTemplate(GridActions?.Count() ?? 0, PermissionSet!)"
                    RowClass="SelectedRowClass"
                    OnCellFocus="@((cell)=> {
                                   if(cell.GridColumn > 1)
                                    HandleSingleRecSelection(cell.Item);
                                })" Style="min-width:900px;"            
                    >

      <TemplateColumn Align="@Align.Center">
        <ChildContent>
          <FluentCheckbox ValueChanged="(e) => HandleRecSelection(e, context)" Value="@Selected.Contains(context)"></FluentCheckbox>
        </ChildContent>
      </TemplateColumn>
      @if (GridActions?.Count() > 0)
      {
        <TemplateColumn Title="" Align="@Align.Center">
          <FluentIcon Value="@(new Icons.Regular.Size16.MoreVertical())" Id="@(context.GetHashCode().ToString())" OnClick="@((e) =>
                                                                                                                         {
                                                                                                                           CurrRec = context;
                                                                                                                         })"></FluentIcon>
          <div style=" position: fixed; ">
            <FluentMenu Anchor="@context.GetHashCode().ToString()" Trigger="MouseButton.Left" Anchored="true" Style="position:fixed;">
              @foreach (var a in GridActions)
              {
                <FluentMenuItem Label="@a.Attribute.Caption" OnClick="@((e) => a.Method.Invoke(Context, [CurrRec]))">
                  <span slot="start"><FluentIcon Value="@(a.Attribute.GridIcon.ToFluentIcon())" Slot="start" /></span>
                </FluentMenuItem>
              }
            </FluentMenu>
          </div>
        </TemplateColumn>
      }

      @foreach (var field in VisibleFields)
      {
        <TemplateColumn Context="data"
                        Sortable="true"
                        Title="@field.Caption"
                        SortBy="GridSort<T>.ByAscending(p => field.Getter(p))">
          <ChildContent>
            <BlazorGeneratorFormFields isTableCell="true" Data="data" field="field" T="T"></BlazorGeneratorFormFields>
          </ChildContent>
          <ColumnOptions>
            <div class="search-box">
              @{
                GetFilterValue(field.Name);
                var name = field.Name;
              }
              <FluentSearch type="search" Autofocus=true
                            @bind-Value:get="(FieldFilters[name])" 
                            @bind-Value:after="()=> HandleClear(field)"
                            @oninput="(e) => HandleFilter(e, field)"
                            Placeholder="@field.Caption" />
            </div>
          </ColumnOptions>
        </TemplateColumn>
      }

      @if ((PermissionSet!.Modify) || (PermissionSet!.Delete))
      {
        <TemplateColumn Title="Actions" Align="@Align.End">
          @if (PermissionSet!.Modify)
          {
            <FluentButton IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => EditAsync(context))" />
          }
          else if (PermissionSet!.Delete)
          {
            <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => HandleDiscard(context))" />
          }
        </TemplateColumn>
      }
    </FluentDataGrid>
  }
  else
  {
    <FluentProgressRing></FluentProgressRing>
  }
</div>
<style>
  .rowselected {
    background: var(--neutral-fill-secondary-rest)
  }

  .GridContainer {
    overflow-x: auto;
  }


</style>