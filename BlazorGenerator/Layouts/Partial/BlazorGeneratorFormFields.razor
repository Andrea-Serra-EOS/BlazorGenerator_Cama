@typeparam T


@if (IsTableCell)
{
  var link = Field.Href?.Invoke(Data) ?? "";
  var style = "";
  var fldStyle = Field.TextStyle?.Invoke(Data) ?? BlazorGenerator.Enum.TextStyle.Normal;
  switch (fldStyle)
  {
    case BlazorGenerator.Enum.TextStyle.Normal:
      style = "";
      break;
    case BlazorGenerator.Enum.TextStyle.Bold:
      style = "font-weight: bold;";
      break;
    case BlazorGenerator.Enum.TextStyle.Italic:
      style = "font-style: italic;";
      break;
    case BlazorGenerator.Enum.TextStyle.Underline:
      style = "text-decoration: underline;";
      break;
    case BlazorGenerator.Enum.TextStyle.Strikethrough:
      style = "text-decoration: line-through;";
      break;
  }
  @if (string.IsNullOrEmpty(link))
  {
    if (Field.FieldType == typeof(Type))
    {
      <FluentIcon Value="@((Field.Getter(Data) as Type)?.ToFluentIcon())"></FluentIcon>
    }
    else
    {
      <span title="@Field.Getter(Data)" style="@style">@Field.Getter(Data)</span>
    }
  }
  else
  {
    <a href="@link" title="@Field.Getter(Data)" style="@style">
      @if (Field.FieldType == typeof(Type))
      {
        <FluentIcon Value="@((Field.Getter(Data) as Type)?.ToFluentIcon())"></FluentIcon>
      }
      else
    {
      @Field.Getter(Data)
      }
    </a>
  }
}
else
{
  @if (ShowLabel)
    {
      <FluentInputLabel ForId="@Id" Label="@Field.Caption" AriaLabel="@Field.Caption"  />
      <div style="flex-grow: 1; margin-bottom: calc(var(--design-unit)* 1px);"></div>
    }

  @if (Field.FieldType == typeof(bool))
    {
      <FluentCheckbox Value="@(Convert.ToBoolean(Field.Getter(Data)))" ValueChanged="(val) => Field.Setter(Data, val)"
                      @attributes="@commonAttributes" />
    }
    else if (Field.FieldType == typeof(short))
  {
      <FluentNumberField TValue="short" Value="@(Convert.ToInt16(Field.Getter(Data)))" ValueChanged="@((val) => Field.Setter(Data, val))"
                         @attributes="@commonAttributes" />
    }
  else if (Field.FieldType == typeof(ushort))
  {
      <FluentNumberField TValue="ushort" Value="@(Convert.ToUInt16(Field.Getter(Data)))" ValueChanged="@((val) => Field.Setter(Data, val))"
                         @attributes="@commonAttributes" />
    }
  else if (Field.FieldType == typeof(int))
  {
      <FluentNumberField TValue="int" Value="@(Convert.ToInt32(Field.Getter(Data)))" ValueChanged="@((val) => Field.Setter(Data, val))"
                         @attributes="@commonAttributes" />
    }
  else if (Field.FieldType == typeof(uint))
  {
      <FluentNumberField TValue="uint" Value="@(Convert.ToUInt32(Field.Getter(Data)))" ValueChanged="@((val) => Field.Setter(Data, val))"
                         @attributes="@commonAttributes" />
    }
  else if (Field.FieldType == typeof(long))
  {
      <FluentNumberField TValue="long" Value="@(Convert.ToInt64(Field.Getter(Data)))" ValueChanged="@((val) => Field.Setter(Data, val))"
                         @attributes="@commonAttributes" />
    }
  else if (Field.FieldType == typeof(ulong))
  {
      <FluentNumberField TValue="ulong" Value="@(Convert.ToUInt64(Field.Getter(Data)))" ValueChanged="@((val) => Field.Setter(Data, val))"
                         @attributes="@commonAttributes" />
    }
  else if (Field.FieldType == typeof(float))
  {
      <FluentNumberField TValue="float" Value="@(Convert.ToSingle(Field.Getter(Data)))" ValueChanged="@((val) => Field.Setter(Data, val))"
                         @attributes="@commonAttributes" />
    }
  else if (Field.FieldType == typeof(double))
  {
      <FluentNumberField TValue="double" Value="@(Convert.ToDouble(Field.Getter(Data)))" ValueChanged="@((val) => Field.Setter(Data, val))"
                         @attributes="@commonAttributes" />
    }
  else if (Field.FieldType == typeof(decimal))
  {
      <FluentNumberField TValue="decimal" Value="@(Convert.ToDecimal(Field.Getter(Data)))" ValueChanged="@((val) => Field.Setter(Data, val))"
                         @attributes="@commonAttributes" />
    }
  else if ((Field.FieldType == typeof(string)))
  {
      <FluentTextField Value="@Field.Getter(Data)?.ToString()" ValueChanged="(val) => Field.Setter(Data, val)"
                       @attributes="@commonAttributes" TextFieldType="@Field.TextFieldType" ChildContent="@Lookup(this)" />

    }
  else if (Field.FieldType == typeof(DateTime))
  {
      <FluentDatePicker @attributes="@commonAttributes" Value="@(Convert.ToDateTime(Field.Getter(Data)))" ValueChanged="@((val) => Field.Setter(Data, val!))" />
    }
  else if (Field.FieldType == typeof(Type))
  {
      <FluentIcon Value="@((Field.Getter(Data) as Type)?.ToFluentIcon())"></FluentIcon>
    }

  else
  {
    @if (Field.FieldType.IsEnum)
      {
      var values = Enum.GetNames(Field.FieldType);
      commonAttributes["Appearance"] = Appearance.Filled;

        <FluentSelect Items=@values
                      Value="@( Enum.GetName(Field.FieldType, Field.Getter(Data)!))"
                      ValueChanged="(val) => Field.Setter(Data, Enum.Parse(Field.FieldType, val))"
                      @attributes="@commonAttributes" />

      }
      else
    {
        <p>Not defined @Field.FieldType.ToString()</p>
      }
  }
  @if (HasLookup)
    {
    var values = Field.OnLookup?.Invoke(Data) ?? new List<object>();
      <FluentMenu Anchor="@Id" @bind-Open="LookupOpen" Width="200px">
        @foreach (var item in values)
        {
          <FluentMenuItem OnClick="@((e) => Field.Setter(Data, item))">
            @item.ToString()
          </FluentMenuItem>
        }
      </FluentMenu>
    }

}


@code {

  RenderFragment Lookup(BlazorGeneratorFormFields<T> self) => __builder =>
  {
    @if (self.HasLookup)
    {
      <FluentIcon Value="@(new Icons.Regular.Size16.ChevronDown())" Color="@Color.Neutral" Slot="end" OnClick="@(() => { self.LookupOpen = !self.LookupOpen; })" />
    }
  };
}