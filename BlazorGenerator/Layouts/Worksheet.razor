@typeparam TData
@typeparam TList
@inherits BlazorgenComponentBase


@{
  var PageActions = AttributesUtils.GetMethodsWithAttribute<PageActionAttribute>(this);
  var gridActions = AttributesUtils.GetMethodsWithAttribute<GridActionAttribute>(this);
  var permissionSet = Security.GetPermissionSet(this.GetType());
}
<PageTitle>@Title</PageTitle>
@if (ShowActions)
{
    <ActionBar Context="this" PageActions="PageActions" />
}

<FluentGrid Spacing="3">
    @foreach (var context in VisibleFields)
    {
        <FluentGridItem md="GridSize">
          <FluentStack VerticalAlignment="VerticalAlignment.Center">
            <BlazorGeneratorFormFields Data="Content" field="context" T="TData" />
          </FluentStack>
        </FluentGridItem>
    }
    @if (ShowButtons)
    {
        <FluentGridItem md="GridSize">
            <FluentStack VerticalAlignment="VerticalAlignment.Center">
                <FluentButton OnClick="@(() => Save(_data, OriginalData))">Save</FluentButton>
                <FluentButton OnClick="@(() => Discard(_data, OriginalData))">Cancel</FluentButton>
            </FluentStack>
        </FluentGridItem>
    }
</FluentGrid>

<FluentDivider Style="width: 100%;margin-top:10px; margin-bottom:10px" Role="DividerRole.Presentation">
    Data
</FluentDivider>

<FluentDataGrid Items="@ListContent" TGridItem="TList" ResizableColumns="true" GridTemplateColumns="50px 50px repeat(auto-fill,14%) 150px ">

  <TemplateColumn Title="" Align="@Align.Center">
    <FluentCheckbox ValueChanged="(e) => HandleRecSelection(e, context)"></FluentCheckbox>
  </TemplateColumn>
  @if (gridActions.Count() > 0)
  {
    <TemplateColumn Title="" Align="@Align.Center">
      <FluentIcon Value="@(new Icons.Regular.Size16.MoreVertical())" Id="@(context.GetHashCode().ToString())" OnClick="@((e) =>
                                                                                                                       {
                                                                                                                         CurrRec = context;
                                                                                                                       })"></FluentIcon>
      <FluentMenu Anchor="@context.GetHashCode().ToString()" Trigger="MouseButton.Left" Anchored="true">
        @foreach (var a in gridActions)
        {
          <FluentMenuItem Label="@a.Attribute.Caption" OnClick="@((e) => a.Method.Invoke(this, [CurrRec]))">
            <span slot="start"><FluentIcon Value="@(a.Attribute.GridIcon.ToFluentIcon())" Slot="start" /></span>
          </FluentMenuItem>
        }
      </FluentMenu>

    </TemplateColumn>
  }

  @foreach (var context in ListVisibleFields)
  {
    <PropertyColumn Title="@context.Caption" Property="@(p => context.Getter(p))" Sortable="true" />
  }

  <TemplateColumn Title="Actions" Align="@Align.End">
    @if (permissionSet.Modify)
    {
      <FluentButton IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => EditAsync(context))" />
    }
    else if (permissionSet.Delete)
    {
      <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => ListDelete(context))" />
    }
  </TemplateColumn>
</FluentDataGrid>
