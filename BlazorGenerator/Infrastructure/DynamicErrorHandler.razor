@inject INotificationService NotificationService;
@inject IMessageService MessageService;
<Div>
</Div>

@code {
    [Parameter]
    public ErrorBoundary errorBoundary { get; set; }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            ErrorBoundaryBase tmp = errorBoundary;
            var test = (Exception)GetInstanceField(tmp.GetType().BaseType, tmp, "CurrentException");
            ConsoleLog("Start Error Logging");
            ConsoleLog(test.Message);
            ConsoleLog(test.StackTrace);
            ConsoleLog("End Error Logging");
        }
        catch { }
        //errorBoundary.Recover();
        MessageService.Error("An Unexpected error occurred!", "Error");
        return base.OnAfterRenderAsync(firstRender);
    }

    internal static object GetInstanceField(Type type, object instance, string fieldName)
    {
        BindingFlags bindFlags = BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic
            | BindingFlags.Static;
        var field = type.GetProperty(fieldName, bindFlags);
        return field.GetValue(instance);
    }

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    public async void ConsoleLog(string message)
    {
        await JSRuntime.InvokeVoidAsync("console.log", message);
    }
}
