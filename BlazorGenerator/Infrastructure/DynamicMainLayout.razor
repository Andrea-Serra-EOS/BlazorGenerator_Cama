@inherits LayoutComponentBase
<Div @onkeydown="@keydown" tabindex="0">

<Layout Sider>
    <LayoutSider>
        <LayoutSiderContent>
            <NavMenu />
        </LayoutSiderContent>
    </LayoutSider>
    <Layout>
        <LayoutContent>
            <CascadingValue Value="@this">
                <ErrorBoundary @ref="errorBoundary">
                    <ErrorContent>
                        <DynamicErrorHandler errorBoundary="errorBoundary" />
                    </ErrorContent>
                    <ChildContent>
                        @Body
                    </ChildContent>
                </ErrorBoundary>

            </CascadingValue>
            <ModalProvider Size="ModalSize.Large" UseModalStructure=true @ref="ModalRef" />
        </LayoutContent>
        <LayoutFooter Fixed=true Display="GetLogDisplay()" Visibility="GetLogVisibility()">
            <Log></Log>
        </LayoutFooter>
    </Layout>
</Layout>

<PageProgressProvider />
<MessageProvider />
<Choose @ref="ChooseService" />
<NotificationProvider Style="z-index:99999999 !important;" />

</Div>

@code {

    [Inject]
    public UIServices UiServices { get; set; }

    private ModalProvider ModalRef
    {
        get
        {
            return UiServices.ModalService.ModalProvider;
        }
        set
        {
            UiServices.ModalService.SetModalProvider(value);
        }
    }

    [Inject] protected BlazorGenOptions Options { get; set; }

    private Theme theme { get; set; }

    public Choose ChooseService { get; set; }

    private bool showLog = false;

    ErrorBoundary errorBoundary;

    private Visibility GetLogVisibility()
    {
        return showLog ? Visibility.Visible : Visibility.Invisible;
    }

    private IFluentDisplay GetLogDisplay()
    {
        return showLog ? Display.Always : Display.None;
    }

    private IFluentSizing GetContentHeight()
    {
        return showLog ? Height.Is75 : Height.Auto;
    }
    private IFluentSizing GetFooterHeight()
    {
        return showLog ? Height.Is25 : Height.Auto;
    }


    public void setLogVisibility(bool show)
    {
        showLog = show;
        StateHasChanged();
    }

    [Inject]
    public IMessageService messageService { get; set; }
    [Inject]
    public IPageProgressService pageProgressService { get; set; }
    [Inject]
    public INotificationService notificationService { get; set; }
    [Inject]
    public IJSRuntime jsRuntime { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //need to be scoped, otherwise won't work.
        UiServices.MessageService = messageService;
        UiServices.PageProgressService = pageProgressService;
        UiServices.NotificationService = notificationService;




        await base.OnAfterRenderAsync(firstRender);
    }



    protected override void OnParametersSet()
    {
        showLog = false;
        errorBoundary?.Recover();
    }


    void keydown(KeyboardEventArgs e )
    {
        if (e.Code == "KeyC" && e.AltKey)
        {
            OpenLogPage();
        }
    }



    public Task OpenLogPage()
    {
        return UiServices.ModalService.Show<LoggerPage>("Log", new ModalInstanceOptions()
            {
                Size = ModalSize.ExtraLarge,
                Scrollable = true
    });
    }
}