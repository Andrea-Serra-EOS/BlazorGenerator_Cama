@inherits LayoutComponentBase



<ThemeProvider Theme="@theme">
    <Layout Sider>
        <LayoutSider>
            <LayoutSiderContent>
                <NavMenu />
            </LayoutSiderContent>
        </LayoutSider>
        <Layout>
            <LayoutContent>
                <CascadingValue Value="@this">
                    <ErrorBoundary @ref="errorBoundary">
                        <ErrorContent>
                            <DynamicErrorHandler errorBoundary="errorBoundary" />
                        </ErrorContent>
                        <ChildContent>
                            @Body
                        </ChildContent>
                    </ErrorBoundary>

                </CascadingValue>
                    <ModalProvider Size="ModalSize.Large" RenderMode="ModalRenderMode.LazyLoad"/>
            </LayoutContent>
            <LayoutFooter Fixed=true Display="GetLogDisplay()" Visibility="GetLogVisibility()">
                <Log></Log>
            </LayoutFooter>
        </Layout>
    </Layout>
</ThemeProvider>

<PageProgressProvider />
<MessageProvider />
<Choose @ref="ChooseService" />
<NotificationProvider Style="z-index:99999999 !important;" />


<HeadContent>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css">
    <link href="_content/Blazorise/blazorise.css" rel="stylesheet" />
    <link href="_content/Blazorise.Bootstrap5/blazorise.bootstrap5.css" rel="stylesheet" />
    <link href="_content/BlazorGenerator/Styles/BlazorGen.css" rel="stylesheet" />
</HeadContent>

<style>
    .fa, .fas {
        color: #1e88e5;
    }
</style>


@code {

    [Inject] protected BlazorGenOptions Options { get; set; }

    private Theme theme { get; set; }

    public Choose ChooseService { get; set; }

    private bool showLog = false;

    ErrorBoundary errorBoundary;

    private Visibility GetLogVisibility()
    {
        return showLog ? Visibility.Visible : Visibility.Invisible;
    }

    private IFluentDisplay GetLogDisplay()
    {
        return showLog ? Display.Always : Display.None;
    }

    private IFluentSizing GetContentHeight()
    {
        return showLog ? Height.Is75 : Height.Auto;
    }
    private IFluentSizing GetFooterHeight()
    {
        return showLog ? Height.Is25 : Height.Auto;
    }


    public void setLogVisibility(bool show)
    {
        showLog = show;
        StateHasChanged();
    }


    protected override void OnParametersSet()
    {
        showLog = false;
        errorBoundary?.Recover();

        theme = Options.Theme;
        theme.ThemeHasChanged();
    }
}