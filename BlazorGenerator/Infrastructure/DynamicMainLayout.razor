@inherits LayoutComponentBase

<Layout Sider>
    <LayoutSider>
        <LayoutSiderContent>
            <NavMenu />
        </LayoutSiderContent>
    </LayoutSider>
    <Layout>
        <LayoutContent>
            <CascadingValue Value="@this">
                <ErrorBoundary @ref="errorBoundary">
                    <ErrorContent>
                        <DynamicErrorHandler errorBoundary="errorBoundary" />
                    </ErrorContent>
                    <ChildContent>
                        @Body
                    </ChildContent>
                </ErrorBoundary>

            </CascadingValue>
            <ModalProvider Size="ModalSize.Large" UseModalStructure=true />
        </LayoutContent>
        <LayoutFooter Fixed=true Display="GetLogDisplay()" Visibility="GetLogVisibility()">
            <Log></Log>
        </LayoutFooter>
    </Layout>
</Layout>

<PageProgressProvider />
<MessageProvider />
<Choose @ref="ChooseService" />
<NotificationProvider Style="z-index:99999999 !important;" />

<link href="_content/BlazorGenerator/Styles/bootstrap.min.css" rel="stylesheet" />
<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css">
<link href="_content/Blazorise/blazorise.css" rel="stylesheet" />
<link href="_content/Blazorise.Bootstrap5/blazorise.bootstrap5.css" rel="stylesheet" />
<link href="_content/BlazorGenerator/Styles/Blazorgen.css" rel="stylesheet" />

<style>
    .b-bar-link:hover, .b-bar-dropdown-item:hover {
    background-color: transparent !important;
  }
</style>


@code {

    [Inject] protected BlazorGenOptions Options { get; set; }

    private Theme theme { get; set; }

    public Choose ChooseService { get; set; }

    private bool showLog = false;

    ErrorBoundary errorBoundary;

    private Visibility GetLogVisibility()
    {
        return showLog ? Visibility.Visible : Visibility.Invisible;
    }

    private IFluentDisplay GetLogDisplay()
    {
        return showLog ? Display.Always : Display.None;
    }

    private IFluentSizing GetContentHeight()
    {
        return showLog ? Height.Is75 : Height.Auto;
    }
    private IFluentSizing GetFooterHeight()
    {
        return showLog ? Height.Is25 : Height.Auto;
    }


    public void setLogVisibility(bool show)
    {
        showLog = show;
        StateHasChanged();
    }


    protected override void OnParametersSet()
    {
        showLog = false;
        errorBoundary?.Recover();
    }
}