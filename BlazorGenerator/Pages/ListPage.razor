@{
    var PageActions = AttributesUtils.GetMethodsWithAttribute<PageActionAttribute>(this);
    var BasicActions = AttributesUtils.GetModelsWithAttribute<BasicActionsAttribute>(this).FirstOrDefault() ?? new BasicActionsAttribute(false, false, false);
}
@typeparam T
@inherits BlazorgenBaseComponent

<Layout>
    <LayoutHeader Fixed>
        <ActionBar PageActions="@PageActions" Context="this"></ActionBar>
    </LayoutHeader>
    <LayoutContent>
        <Container Fluid>
            <DataGrid TItem="T"
                      @ref="@_datagrid"
                      Data="@Data"
                      SelectionMode="@SelectionMode"
                      @bind-SelectedRows="@SelectedRecs"
                      @bind-SelectedRow="@SelectedRec"
                      Resizable="true"
                      Striped="true"
                      ShowPager="false"
                      ShowPageSizes="false"
                      PageSize="int.MaxValue"
                      Filterable="true"
                      Responsive="true"
                      Narrow="true"
                      FixedHeader="true"
                      FixedHeaderDataGridHeight="75vh"
                      FixedHeaderDataGridMaxHeight="75vh"
                      Editable
                      EditMode="@GetEditMode()"
                      NewItemCreator="@CreateNewItem"
                      RowInserted="@OnInsert"
                      HeaderThemeContrast="ThemeContrast.Light"
                      RowStyling="@RowStyling"
                      RowRemoved="@OnDelete"
                      RowUpdated="@OnModify"
                      CommandMode="DataGridCommandMode.Commands">

                <DataGridColumns>
                    @if (SelectionMode == DataGridSelectionMode.Multiple)
                    {
                        <DataGridMultiSelectColumn TItem="T" Width="30px"></DataGridMultiSelectColumn>
                    }
                    <DataGridCommandColumn Width="150px" TItem="T" NewCommandAllowed="BasicActions.NewAction" EditCommandAllowed="BasicActions.EditAction" DeleteCommandAllowed="BasicActions.DeleteAction">
                        <NewCommandTemplate>
                            <Button Size="Size.ExtraSmall" Color="Color.Dark" Margin="Margin.Is1" Outline="true" Clicked="@context.Clicked"><Icon Name="IconName.Add"></Icon>&nbsp;@context.LocalizationString</Button>
                        </NewCommandTemplate>
                        <EditCommandTemplate>
                            <Button Size="Size.ExtraSmall" Color="Color.Dark" Margin="Margin.Is1" Outline="true" Clicked="@context.Clicked"><Icon Name="IconName.Edit"></Icon>&nbsp;@context.LocalizationString</Button>
                        </EditCommandTemplate>
                        <SaveCommandTemplate>
                            <Button Size="Size.ExtraSmall" Color="Color.Dark" Margin="Margin.Is1" Outline="true" PreventDefaultOnSubmit Clicked="@context.Clicked">@context.LocalizationString</Button>
                        </SaveCommandTemplate>
                        <DeleteCommandTemplate>
                            <Button Size="Size.ExtraSmall" Color="Color.Dark" Margin="Margin.Is1" Outline="true" Clicked="@context.Clicked"><Icon Name="IconName.Delete"></Icon>&nbsp;@context.LocalizationString</Button>
                        </DeleteCommandTemplate>
                        <CancelCommandTemplate>
                            <Button Size="Size.ExtraSmall" Color="Color.Dark" Margin="Margin.Is1" Outline="true" Clicked="@context.Clicked">@context.LocalizationString</Button>
                        </CancelCommandTemplate>
                        <ClearFilterCommandTemplate>
                            <Button Size="Size.ExtraSmall" Color="Color.Dark" Margin="Margin.Is1" Outline="true" Clicked="@context.Clicked"><Icon Name="IconName.Clear"></Icon>&nbsp;@context.LocalizationString</Button>
                        </ClearFilterCommandTemplate>
                    </DataGridCommandColumn>
                    @foreach (var fld in VisibleFields)
                    {
                        switch (fld.FieldType)
                        {
                            case BlazorGenerator.Enum.FieldType.Numeric:
                                <BlazorGenerator.Pages.Partials.DataGridNumeric T="T" Field="fld" Order="@(VisibleFields.IndexOf(fld))" />
                                break;
                            case BlazorGenerator.Enum.FieldType.Boolean:
                                <BlazorGenerator.Pages.Partials.DataGridCheckbox T="T" Field="fld" Order="@(VisibleFields.IndexOf(fld))" />
                                break;
                            case BlazorGenerator.Enum.FieldType.Custom:
                                <BlazorGenerator.Pages.Partials.DataGridCustom T="T" Field="fld" Order="@(VisibleFields.IndexOf(fld))" />
                                break;
                            case BlazorGenerator.Enum.FieldType.Select:
                                <BlazorGenerator.Pages.Partials.DataGridDropdown T="T" Field="fld" Order="@(VisibleFields.IndexOf(fld))" />
                                break;
                            case BlazorGenerator.Enum.FieldType.Button:
                                break;

                            case BlazorGenerator.Enum.FieldType.Icon:
                                <BlazorGenerator.Pages.Partials.DataGridIcon T="T" Field="fld" Order="@(VisibleFields.IndexOf(fld))" />
                                break;
                            default:
                                <DataGridColumn TItem="T"
                                    Field="@fld.Name"
                                    Caption="@fld.Caption"
                                    Sortable="true"
                                    Filterable="true" Editable="true" Displayable="@(!fld.EditOnly)" DisplayOrder="@(VisibleFields.IndexOf(fld))" />
                                break;
                        }
                    }
                </DataGridColumns>

            </DataGrid>
        </Container>
    </LayoutContent>
</Layout>

<Modal @ref="@ModalRef" Closing="OnModalClose">
    <ModalContent Centered Size="@modalSize">
        <ModalHeader>
            <CloseButton />
        </ModalHeader>
        <ModalBody ChildContent="@ChildModalContent" />
    </ModalContent>
</Modal>