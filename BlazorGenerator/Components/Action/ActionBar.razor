
<FluentToolbar Style="min-width:100%; margin-bottom:10px; border-radius:5px; padding:5px; vertical-align:middle">
  <FluentLabel Typo="Typography.PaneHeader" Style="vertical-align:text-top;">
    @((Context as BlazorgenComponentBase).Title)
  </FluentLabel>

  <FluentDivider Style="height: 20px; width: 20px;" Orientation="Orientation.Vertical"></FluentDivider>

  @{
    PopulateDictionary();
    foreach (var item in ActionGroups)
    {
      var filtered = PageActions.Where(o =>
o.Attribute.Group == item.Key);
      if (item.Key.ToLower() == "default" || item.Value == 1)
      {
        foreach (var action in filtered)
        {
          <FluentButton OnClick="@(() => action.Method.Invoke(Context, null))">
            @(action.Attribute.Caption ?? action.Method.Name)
            <span slot="start">
              <FluentIcon Value="@(action.Attribute.Icon.ToFluentIcon())" Slot="start" Color="Color.Neutral" />
            </span>
          </FluentButton>
        }
      }
      else
      {

        <FluentMenuItem Role="MenuItemRole.MenuItem">
          <ChildContent>
            @item.Key
          </ChildContent>
          <MenuItems>
            @foreach (var action in filtered)
            {
              <FluentMenuItem OnClick="@(() => action.Method.Invoke(Context, null))" Role="MenuItemRole.MenuItem">
                @(action.Attribute.Caption ?? action.Method.Name)
                <span slot="start">
                  <FluentIcon Value="@action.Attribute.Icon.ToFluentIcon()" Slot="start" Color="Color.Neutral" />
                </span>
              </FluentMenuItem>
            }
          </MenuItems>
        </FluentMenuItem>


      }
    }

  }

</FluentToolbar>


