@{
	var PageActions = AttributesUtils.GetMethodsWithAttribute<PageActionAttribute>(this);
	var BasicActions = AttributesUtils.GetModelsWithAttribute<BasicActionsAttribute>(this).FirstOrDefault() ?? new BasicActionsAttribute(false, false, false);
}
@typeparam T

<h3>@Title</h3>

<Layout>
	<LayoutHeader Fixed="true">
		<ActionBar PageActions="@PageActions" Context="this"></ActionBar>
	</LayoutHeader>
	<LayoutContent>
		<DataGrid TItem="T"
				  @ref="@_datagrid"
				  Data="@Data"
				  SelectionMode="@SelectionMode"
				  @bind-SelectedRows="@SelectedRecs"
				  Resizable="true"
				  Striped="true"
				  ShowPager="false"
				  ShowPageSizes="false"
				  PageSize="int.MaxValue"
				  Filterable="true"
				  Responsive="true"
				  FixedHeader="true"
				  FixedHeaderDataGridHeight="90%"
				  Narrow="true"
				  Editable
				  EditMode="@GetEditMode()"
				  NewItemCreator="@CreateNewItem"
				  RowInserted="@OnInsert"
				  RowRemoved="@OnDelete"
				  RowUpdated="@OnModify"
				  CommandMode="DataGridCommandMode.Commands">

			<DataGridColumns>
				@if (SelectionMode == DataGridSelectionMode.Multiple)
				{
					<DataGridMultiSelectColumn TItem="T" Width="30px"></DataGridMultiSelectColumn>
				}
				<DataGridCommandColumn TItem="T" NewCommandAllowed="BasicActions.NewAction" EditCommandAllowed="BasicActions.EditAction" DeleteCommandAllowed="BasicActions.DeleteAction">
					<NewCommandTemplate>
						<Button Size="Size.ExtraSmall" Color="Color.Dark" Margin="Margin.Is1" Outline="true" Clicked="@context.Clicked"><Icon Name="IconName.Add"></Icon>&nbsp;@context.LocalizationString</Button>
					</NewCommandTemplate>
					<EditCommandTemplate>
						<Button Size="Size.ExtraSmall" Color="Color.Dark" Margin="Margin.Is1" Outline="true" Clicked="@context.Clicked"><Icon Name="IconName.Edit"></Icon>&nbsp;@context.LocalizationString</Button>
					</EditCommandTemplate>
					<SaveCommandTemplate>
						<Button Size="Size.ExtraSmall" Color="Color.Dark" Margin="Margin.Is1" Outline="true" PreventDefaultOnSubmit Clicked="@context.Clicked">@context.LocalizationString</Button>
					</SaveCommandTemplate>
					<DeleteCommandTemplate>
						<Button Size="Size.ExtraSmall" Color="Color.Dark" Margin="Margin.Is1" Outline="true" Clicked="@context.Clicked"><Icon Name="IconName.Delete"></Icon>&nbsp;@context.LocalizationString</Button>
					</DeleteCommandTemplate>
					<CancelCommandTemplate>
						<Button Size="Size.ExtraSmall" Color="Color.Dark" Margin="Margin.Is1" Outline="true" Clicked="@context.Clicked">@context.LocalizationString</Button>
					</CancelCommandTemplate>
					<ClearFilterCommandTemplate>
						<Button Size="Size.ExtraSmall" Color="Color.Dark" Margin="Margin.Is1" Outline="true" Clicked="@context.Clicked"><Icon Name="IconName.Clear"></Icon>&nbsp;@context.LocalizationString</Button>
					</ClearFilterCommandTemplate>
				</DataGridCommandColumn>
				@foreach (var fld in VisibleFields)
				{
					switch (fld.FieldType)
					{
						case BlazorGenerator.Enum.FieldType.Numeric:
							<DataGridNumericColumn TItem="T"
									   Field="@fld.Name"
									   Caption="@fld.Caption"
									   Sortable="true"
									   Filterable="true" Editable="true" Displayable="@(!fld.EditOnly)">
							</DataGridNumericColumn>
							break;
						case BlazorGenerator.Enum.FieldType.Boolean:
							<DataGridCheckColumn TItem="T" Field="@fld.Name" Caption="@fld.Caption" Editable="true" Sortable="true" Filterable="true" Displayable="@(!fld.EditOnly)">
								<DisplayTemplate>
									<Tooltip Text="@fld.ToolTip">
										<Check TValue="bool" Checked="@((bool)fld.Getter(context))" ReadOnly="true" Disabled />
									</Tooltip>
								</DisplayTemplate>
								<EditTemplate>
									<Check TValue="bool"
							   Checked="@((bool)fld.Getter(context.Item))"
							   CheckedChanged="@((v) => {
											   fld.Setter(context.Item,v);
												context.CellValue = fld.Getter(context.Item);
										   })" />
								</EditTemplate>
							</DataGridCheckColumn>
							break;
						case BlazorGenerator.Enum.FieldType.Custom:
							<DataGridColumn TItem="T"
								Field="@fld.Name" Caption="@fld.Caption" Editable="true" Displayable="@(!fld.EditOnly)">
								<DisplayTemplate>
									<Tooltip Text="@fld.ToolTip">
										<TextEdit Text="@((string) fld.Getter(context)?.ToString())" Placeholder="@fld.Caption" ReadOnly="true"></TextEdit>
									</Tooltip>
								</DisplayTemplate>
								<EditTemplate>
									<TextEdit Text="@((string) fld.Getter(context.Item)?.ToString())"
								  TextChanged="@((v) => {
                                                                        fld.Setter(context.Item, v);
                                                                        context.CellValue = fld.Getter(context.Item);
                                                                    })"
								  Placeholder="@fld.Caption"></TextEdit>
								</EditTemplate>
							</DataGridColumn>
							break;
						case BlazorGenerator.Enum.FieldType.Select:
							<DataGridSelectColumn TItem="T"
									  Field="@fld.Name"
									  Caption="@fld.Caption"
									  Sortable="true"
									  Filterable="true" Editable="true" Displayable="@(!fld.EditOnly)">
								<DisplayTemplate>
									<Tooltip Text="@fld.ToolTip">
										<Text>@((string) fld.Getter(context)?.ToString())</Text>
									</Tooltip>
								</DisplayTemplate>
								<EditTemplate>
									<Select TValue="string" SelectedValue="@(fld.Getter(context.Item)?.ToString())"
								SelectedValueChanged="@((v) => {
                                                                        fld.Setter(context.Item, v);
                                                                        context.CellValue = fld.Getter(context.Item);
                                                                    })">
										@foreach (string item in fld.Values)
										{
											<SelectItem Value="@item">@(item.ToString())</SelectItem>
										}
									</Select>
								</EditTemplate>
							</DataGridSelectColumn>
							break;
						case BlazorGenerator.Enum.FieldType.Button:
							break;

						case BlazorGenerator.Enum.FieldType.Icon:
							<DataGridColumn TItem="T"
								Field="@fld.Name" Caption="@fld.Caption" Editable="false">
								<DisplayTemplate>
									<Tooltip Text="@fld.ToolTip">
										<Icon Name="@((Blazorise.IconName) fld.Getter(context))"></Icon>
									</Tooltip>
								</DisplayTemplate>
							</DataGridColumn>
							break;
						default:
							<DataGridColumn TItem="T"
								Field="@fld.Name"
								Caption="@fld.Caption"
								Sortable="true"
								Filterable="true" Editable="true" Displayable="@(!fld.EditOnly)" />
							break;
					}
				}
			</DataGridColumns>

		</DataGrid>
	</LayoutContent>
</Layout>

<Modal @ref="@ModalRef"></Modal>