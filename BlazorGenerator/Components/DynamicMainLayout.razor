@inherits LayoutComponentBase
<Layout Sider="true">
	<LayoutSider>
		<LayoutSiderContent>
			<NavMenu />
		</LayoutSiderContent>
	</LayoutSider>
	<Layout Height="Height.Is100">
		<CascadingValue Value="@this">
			<LayoutContent Height="GetContentHeight()" Overflow="Overflow.Auto">
				<Blazorise.Container Fluid="true" Margin="Margin.Is4.FromTop">
					@if (Options.ShowBreaddcrumbs)
					{
						<DynamicBreadcrumbs />
					}
					<PageProgressAlert />
					<MessageAlert />
					<Choose @ref="ChooseService"/>
					<NotificationAlert Style="z-index:99999999 !important;" />
					<ErrorBoundary @ref="errorBoundary">
						<ErrorContent>
							<DynamicErrorHandler errorBoundary="errorBoundary" />
						</ErrorContent>
						<ChildContent >
							@Body
						</ChildContent>
					</ErrorBoundary>
				</Blazorise.Container>
			</LayoutContent>
			<LayoutFooter Fixed=true Visibility="GetLogVisibility()" Display="GetLogDisplay()" Height="GetFooterHeight()" >
				<Log></Log>
			</LayoutFooter>
		</CascadingValue>
	</Layout>
</Layout>

<HeadContent>
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css" integrity="sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l" crossorigin="anonymous">
	<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.12.0/css/all.css">
	<link href="_content/Blazorise/blazorise.css" rel="stylesheet" />
	<link href="_content/Blazorise.Bootstrap/blazorise.bootstrap.css" rel="stylesheet" />
	<link href="_content/Blazorise.Snackbar/blazorise.snackbar.css" rel="stylesheet" />
</HeadContent>

@code {

	[Inject] protected BlazorGenOptions Options { get; set; }

	public Choose ChooseService { get; set; }

	private bool showLog = false;

	ErrorBoundary errorBoundary;

	private Visibility GetLogVisibility()
	{
		return showLog ? Visibility.Visible : Visibility.Invisible;
	}

	private IFluentDisplay GetLogDisplay()
	{
		return showLog ? Display.Always : Display.None;
	}

	private IFluentSizing GetContentHeight()
	{
		return showLog ? Height.Is75 : Height.Is100;
	}
	private IFluentSizing GetFooterHeight()
	{
		return showLog ? Height.Is25 : new FluentSizing( SizingType.Height ).WithSize( SizingSize.Default );
	}


	public void setLogVisibility(bool show)
	{
		showLog = show;
		StateHasChanged();
	}


	protected override void OnParametersSet()
	{
		showLog = false;
		errorBoundary?.Recover();
	}
}