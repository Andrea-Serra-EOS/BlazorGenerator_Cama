@using BlazorGenerator.Enum
@inject BlazorGenLogger blazorgenLogger
@implements IDisposable

<Accordion>
	<Collapse Visible="@LogVisible">
		<CollapseHeader @onclick="(()=>LogVisible = !LogVisible)" Class="customHand"> 
			<Heading Size="HeadingSize.Is5">
				Log
				@*<Button Clicked="@(()=>LogVisible = !LogVisible)" Padding="Padding.Is0">Logs</Button>*@
			</Heading>
		</CollapseHeader>
		<CollapseBody Overflow="Overflow.Auto" Style="max-height:150px">			
				<Repeater Items="@logs">
					<Paragraph TextColor="@DecodeTextColor(context.Item2)">@context.Item1</Paragraph>
				</Repeater>			
		</CollapseBody>
	</Collapse>
</Accordion>

<style>
	.customHand:hover{
		cursor: pointer;
	}
</style>

@code {
	bool LogVisible { get; set; }
	List<(string, LogType)> logs = new List<(string, LogType)>();

	protected override void OnInitialized()
	{
		blazorgenLogger.OnChange += UpdateLog;
	}

	private void UpdateLog()
	{
		logs.Add((blazorgenLogger.LogMessage, blazorgenLogger.LogType));
		StateHasChanged();
	}

	private TextColor DecodeTextColor(LogType logType)
	{
		switch (logType)
		{
			case LogType.Error:
				return TextColor.Danger;
			case LogType.Info:
				return TextColor.Info;
			case LogType.Warning:
				return TextColor.Warning;
		}
		return TextColor.Body;
	}

	public void Dispose()
	{
		blazorgenLogger.OnChange -= UpdateLog;
	}
}