@{
	var PageActions = AttributesUtils.GetMethodsWithAttribute<PageActionAttribute>(this);
	var Subforms = AttributesUtils.GetPropertiesWithAttribute<SubformAttribute>(this);
	var BasicActions = AttributesUtils.GetModelsWithAttribute<BasicActionsAttribute>(this).FirstOrDefault() ?? new BasicActionsAttribute(false, false, false);
}
@typeparam T
@inherits BlazorgenBaseComponent

<Layout>
	<LayoutHeader>
		@if (Options.ShowBreaddcrumbs)
		{
			<DynamicBreadcrumbs />
		}
		<ActionBar PageActions="@PageActions" Context="this"></ActionBar>
	</LayoutHeader>
	<LayoutContent>
		<Card Margin="Margin.Is4.FromBottom">
			<CardHeader>
				<CardTitle>@Title</CardTitle>
			</CardHeader>
			<CardBody>
				<Fields>
					@foreach (var fld in VisibleFields)
					{
						<Field ColumnSize="@fld.ColumnSize" Horizontal="true">
							<FieldLabel ColumnSize="ColumnSize.Is3">@(fld.Caption): </FieldLabel>
							<FieldBody ColumnSize="ColumnSize.Is9">
								@switch (fld.FieldType)
								{
									case BlazorGenerator.Enum.FieldType.Numeric:
										<BlazorGenerator.Components.Partials.Numeric T="T" Data="Data" Field="fld" />
										break;
									case BlazorGenerator.Enum.FieldType.Boolean:
										<BlazorGenerator.Components.Partials.Checkbox T="T" Data="Data" Field="fld" />
										break;
									case BlazorGenerator.Enum.FieldType.Select:
										<BlazorGenerator.Components.Partials.Dropdown T="T" Data="Data" Field="fld" />
										break;
									case BlazorGenerator.Enum.FieldType.Button:
										<BlazorGenerator.Components.Partials.Btn T="T" Data="Data" Field="fld" />
										break;
									case BlazorGenerator.Enum.FieldType.Custom:
										<BlazorGenerator.Components.Partials.Custom T="T" Data="Data" Field="fld" />
										break;
									default:
										<BlazorGenerator.Components.Partials.Txt T="T" Data="Data" Field="fld" />
										break;
								}
							</FieldBody>
						</Field>
					}
				</Fields>
				<br />
				@if (BasicActions.EditAction || BasicActions.NewAction)
				{
					<Button Clicked="@(() => OnModify(Data))" Color="Color.Secondary" Float="Float.End">Save</Button>
				}
			</CardBody>
		</Card>

		@{
			foreach (var item in Subforms)
			{
				<Card Margin="Margin.Is4.FromBottom">
					<CardHeader>
						<CardTitle>@item.Attribute.Caption</CardTitle>
					</CardHeader>
					<CardBody>
						@{
							var f = new RenderFragment(builder =>
							{
								builder.OpenComponent(0, item.Property.PropertyType);
								builder.CloseComponent();
							});

							@f
						}
					</CardBody>
				</Card>
			}
		}
	</LayoutContent>
</Layout>



<Modal @ref="@ModalRef" Closing="OnModalClose">
	<ModalContent Centered Size="@modalSize">
		<ModalHeader>
			<CloseButton />
		</ModalHeader>
		<ModalBody ChildContent="@ChildModalContent" />
	</ModalContent>
</Modal>