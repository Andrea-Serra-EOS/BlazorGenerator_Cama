@inject BlazorGenOptions options;
@inject NavigationManager NavigationManager;
@inject BlazorGenSecurity security

<Bar Mode="BarMode.VerticalInline"
     CollapseMode="BarCollapseMode.Small"
     Breakpoint="Breakpoint.Desktop"
     Background="Background.Light"
     ThemeContrast="ThemeContrast.Light"
@ref="Menu">
    <BarToggler />
    <BarBrand>
        <BarItem>
            <BarLink To="/">
                <BarIcon IconName="IconName.Dashboard" />
                Home
            </BarLink>
        </BarItem>
    </BarBrand>

    <BarMenu>
        <BarStart>
            @{
                PopulateDictionary();


                foreach (var item in MenuGroups.Where(o => o.Key.ToLower() == "default"))
                {
                    var filtered = menus.Where(o => o.Group == item.Key);
                    if (item.Key.ToLower() == "default" || item.Value == 1)
                    {
                        foreach (var elem in filtered)
                        {
                            <BarItem TextOverflow="TextOverflow.Truncate">
                                <BarLink To="@elem.Route">
                                    <BarIcon IconName="@elem.Icon" />
                                    @elem.Title
                                </BarLink>
                            </BarItem>
                        }
                    }
                    else
                    {
                        <BarItem>
                            <BarDropdown>
                                <BarDropdownToggle>
                                    <BarIcon IconName="IconName.AlignJustify" />
                                    @item.Key
                                </BarDropdownToggle>
                                <BarDropdownMenu>
                                    @foreach (var elem in filtered)
                                    {
                                        <BarDropdownItem Padding="Padding.Is0.OnAll.Is2.FromStart">
                                            <BarLink To="@elem.Route">
                                                <BarIcon IconName="@elem.Icon" />
                                                @elem.Title
                                            </BarLink>
                                        </BarDropdownItem>
                                    }
                                </BarDropdownMenu>
                            </BarDropdown>
                        </BarItem>
                    }
                }
                foreach (var item in MenuGroups.Where(o => o.Key.ToLower() != "default"))
                {
                    var filtered = menus.Where(o => o.Group == item.Key);
                    if (item.Key.ToLower() == "default" || item.Value == 1)
                    {
                        foreach (var elem in filtered)
                        {
                            <BarItem TextOverflow="TextOverflow.Truncate">
                                <BarLink To="@elem.Route">
                                    <BarIcon IconName="@elem.Icon" />
                                    @elem.Title
                                </BarLink>
                            </BarItem>
                        }
                    }
                    else
                    {
                        <BarItem>
                            <BarDropdown>
                                <BarDropdownToggle>
                                    <BarIcon IconName="IconName.AlignJustify" />
                                    @item.Key
                                </BarDropdownToggle>
                                <BarDropdownMenu>
                                    @foreach (var elem in filtered)
                                    {
                                        <BarDropdownItem Padding="Padding.Is0.OnAll.Is2.FromStart">
                                            <BarLink To="@elem.Route">
                                                <BarIcon IconName="@elem.Icon" />
                                                @elem.Title
                                            </BarLink>
                                        </BarDropdownItem>
                                    }
                                </BarDropdownMenu>
                            </BarDropdown>
                        </BarItem>
                    }
                }
            }
        </BarStart>
        <BarEnd>

            @{
                var Footers = Utils.AttributesUtils.GetModelsWithAttribute<MenuFooter>();
                foreach (var item in Footers)
                {
                    <BarItem>
                        @{
                          var f = new RenderFragment(builder =>
                        {
                        builder.OpenComponent(0, item.Type);
                        builder.CloseComponent();
                        });

                        @f
                        }
                    </BarItem>
                }
            }
        </BarEnd>
    </BarMenu>
</Bar>



