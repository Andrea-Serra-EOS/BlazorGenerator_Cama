
<FluentGrid Style="" Justify="JustifyContent.FlexStart" Spacing="1" Class="actionblock">
  <FluentGridItem Justify="JustifyContent.FlexStart" Style="">
    <FluentLabel Typo="Typography.PaneHeader" Style="vertical-align: text-top; padding-bottom: 0;">
      @((Context as BlazorGeneratorComponentBase)?.Title)
    </FluentLabel>
  </FluentGridItem>
  <FluentOverflow Style="width: 100%; margin-bottom: 5px; ">
    <ChildContent>
      @{
        PopulateDictionary();
        foreach (var item in ActionGroups)
        {
          var filtered = PageActions.Where(o =>
    o.Attribute.Group == item.Key);
          if (item.Key.ToLower() == "default" || item.Value == 1)
          {
            foreach (var action in filtered)
            {
              <FluentOverflowItem Data="action">
                <FluentGridItem xs="12" sm="6" md="0">
                  <FluentButton OnClick="@(() => ReflectionUtilites.InvokeAction(action.Method, Context))">
                    @(action.Attribute.Caption ?? action.Method.Name)
                    <span slot="start">
                      <FluentIcon Value="@(action.Attribute.Icon.ToFluentIcon())" Slot="start" Color="Color.Accent" />
                    </span>
                  </FluentButton>
                </FluentGridItem>
              </FluentOverflowItem>
            }
          }
          else
          {

            PopOverBind.TryAdd(@item.Key, false);
            <FluentOverflowItem Data="filtered">
              <FluentGridItem xs="12" sm="6" md="0">
                <FluentButton id="@item.Key" @onclick="() => PopOverBind[item.Key] = !PopOverBind[item.Key]">
                  @item.Key
                  <FluentIcon Value="@( new Icons.Regular.Size16.ChevronDown())" Slot="end" Color="Color.Accent" />
                </FluentButton>
              </FluentGridItem>
            </FluentOverflowItem>
            <FluentPopover AnchorId="@item.Key" @bind-Open="PopOverBind[item.Key]" HorizontalPosition="HorizontalPosition.Right">
              <Body>
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="5">

                  @foreach (var action in filtered)
                  {
                    <FluentButton OnClick="@(() => { PopOverBind[item.Key] = false; _ = ReflectionUtilites.InvokeAction(action.Method, Context); })">
                      @(action.Attribute.Caption ?? action.Method.Name)
                      <span slot="start">
                        <FluentIcon Value="@action.Attribute.Icon.ToFluentIcon()" Slot="start" Color="Color.Accent" />
                      </span>
                    </FluentButton>
                  }
                </FluentStack>
              </Body>
            </FluentPopover>

          }
        }


      }
    </ChildContent>
    <MoreButtonTemplate>
      <FluentButton OnClick="@(()=> OpenMore = !OpenMore)">...</FluentButton>
    </MoreButtonTemplate>
    <OverflowTemplate>
      <FluentPopover AnchorId="@context.IdMoreButton" @bind-Open="@OpenMore" HorizontalPosition="HorizontalPosition.Left" Style="width: 300px;">
        <Body>
          <FluentGrid Style="overflow: hidden; flex: 0 0 auto; margin-bottom: 5px" Justify="JustifyContent.FlexStart" Spacing="1">
            @foreach (var item in context.ItemsOverflow)
            {
              <FluentGridItem xs="12" sm="6" md="0">
                @if (item.Data is (MethodInfo Method, PageActionAttribute Attribute))
                {
                  var casted = ((MethodInfo Method, PageActionAttribute Attribute))item.Data;

                  <FluentButton OnClick="@(() => ReflectionUtilites.InvokeAction(casted.Method, Context))">
                    @(casted.Attribute.Caption ?? casted.Method.Name)
                    <span slot="start">
                      <FluentIcon Value="@(casted.Attribute.Icon.ToFluentIcon())" Slot="start" Color="Color.Accent" />
                    </span>
                  </FluentButton>
                }
                else if (item.Data is IEnumerable<(MethodInfo Method, PageActionAttribute Attribute)>)
                {
                  var casted = item.Data as IEnumerable<(MethodInfo Method, PageActionAttribute Attribute)>;
                  <div style="border: 1px solid var(--neutral-fill-strong-focus) ">
                    <FluentLabel Typo="Typography.Subject" Alignment="HorizontalAlignment.Center">@casted.First().Attribute.Group</FluentLabel>
                    <FluentStack Orientation="Orientation.Horizontal" Wrap="true" Style="margin-top:10px;">
                      @foreach (var action in casted)
                      {
                        <FluentButton OnClick="@(() => { _ = ReflectionUtilites.InvokeAction(action.Method, Context); })">
                          @(action.Attribute.Caption ?? action.Method.Name)
                          <span slot="start">
                            <FluentIcon Value="@action.Attribute.Icon.ToFluentIcon()" Slot="start" Color="Color.Accent" />
                          </span>
                        </FluentButton>
                      }
                    </FluentStack>
                  </div>
                }
              </FluentGridItem>
            }
          </FluentGrid>
        </Body>
      </FluentPopover>
    </OverflowTemplate>

  </FluentOverflow>

</FluentGrid>

<style>
  .fluent-popover-content {
    padding: 5px !important;
  }
</style>


