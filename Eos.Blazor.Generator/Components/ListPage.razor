@{
    var VisibleProp = AttributesUtils.getPropertiesWithAttribute<Visible>(this);
    var PageActions = AttributesUtils.getMethodsWithAttribute<PageAction>(this);
}
<div class="ListPage">
    <nav class="navbar navbar-expand-lg bg-light">
        <!-- Links -->
        <ul class="navbar-nav">
            <li class="nav-item">
                <a class="nav-link btn btn-light @(((isEditable? "active":"")))" @onclick="@(() => Edit())">Edit</a>
            </li>
            @foreach (var test in PageActions)
            {
                <li class="nav-item">
                    <a class="nav-link btn btn-light" @onclick="@(() => test.Method.Invoke(this, null))">
                        <span class="@test.Attribute.Icon" aria-hidden="true"></span>
                        @(test.Attribute.Caption ?? test.Method.Name)
                    </a>
                </li>
            }
        </ul>
    </nav>
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th> </th>
                    @{

                        foreach (var hd in VisibleProp)
                        {
                            <th>@(hd.Attribute.Caption ?? hd.Property.Name)</th>
                        }

                    }
                </tr>
            </thead>
            <tbody>
                @{

                    foreach (var item in Data)
                    {
                        <tr>
                            <td>
                                <input type="checkbox" value="test"
                                       checked="@SelectedRecs.Contains(item)"
                                       @onchange="@((e) => { if ((bool)e.Value) { SelectedRecs.Add(item); } else { SelectedRecs.Remove(item); } } )" />
                            </td>

                            @foreach (var prop in VisibleProp)
                            {
                                <td>

                                    <input class="form-control" 
                                           value="@prop.Property.GetValue(item)" 
                                           @onchange="@((e)=> { ReflectionUtilites.SetPropertyValueFromString(item, prop.Property, (string)e.Value); })" 
                                           readonly="@(!isEditable)" />
                                </td>
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>


@code {

    public List<dynamic> SelectedRecs { get; private set; } = new List<dynamic>();
    public List<dynamic> Data { get; set; }
    bool isEditable = false;

    void Edit()
    {
        isEditable = !isEditable;
    }


    
}
