@{
    var PageActions = AttributesUtils.GetMethodsWithAttribute<PageActionAttribute>(this);
    var Subforms = AttributesUtils.GetPropertiesWithAttribute<SubformAttribute>(this);
}
@typeparam T

<Layout>
    <LayoutHeader>
        <ActionBar PageActions="@PageActions" Context="this"></ActionBar>
    </LayoutHeader>
    <LayoutContent>
        <Card Margin="Margin.Is4.FromBottom">
            <CardHeader>
                <CardTitle>@Title</CardTitle>
            </CardHeader>
            <CardBody>
                <Fields>
                    @foreach (var fld in VisibleFields)
                    {
                        <Field ColumnSize="ColumnSize.Is6.OnDesktop" Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is4">@(fld.Caption): </FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is8">
                                @switch (fld.FieldType)
                                {
                                    case Generator.Enum.FieldType.Numeric:
                                        <NumericEdit Value="@(fld.Getter(Data))"
                                                     @onchange="@((e) => { fld.Setter(Data, e.Value); })"
                                                     Placeholder="@fld.Caption"
                                                     ReadOnly="@(!fld.Editable)" />
                                        break;
                                    case Generator.Enum.FieldType.Boolean:
                                        <Check TValue="bool"
                                               Checked="@((bool)fld.Getter(Data))"
                                               ReadOnly="@(!fld.Editable)" @onchange="@((v)=> fld.Setter(Data, v.Value))" />
                                        break;
                                    case Generator.Enum.FieldType.Select:
                                        <Select TValue="string" SelectedValue="@(fld.Getter(Data)?.ToString())"
                                                SelectedValueChanged="@((v) => { fld.Setter(Data, v); })" ReadOnly="@(!fld.Editable)">
                                            @foreach (string item in fld.Values)
                                            {
                                                <SelectItem Value="@item">@(item.ToString())</SelectItem>
                                            }
                                        </Select>
                                        break;
                                    case Generator.Enum.FieldType.Button:
                                        <Button @onclick="@(() => fld.Setter(Data, null))" Color="Color.Dark" Outline="true">
                                            @fld.Caption
                                        </Button>
                                        break;
                                    default:
                                        <TextEdit Text="@((string) fld.Getter(Data))"
                                                  @onchange="@((e) => { fld.Setter(Data, e.Value); })"
                                                  Placeholder="@fld.Caption"
                                                  ReadOnly="@(!fld.Editable)" Role="fld.TextRole" />
                                        break;
                                }
                            </FieldBody>
                        </Field>
                    }
                </Fields>
            </CardBody>
        </Card>
    </LayoutContent>
</Layout>


@{
    foreach (var item in Subforms)
    {
        <Card Margin="Margin.Is4.FromBottom">
            <CardHeader>
                <CardTitle>@item.Attribute.Caption</CardTitle>
            </CardHeader>
            <CardBody>
                @{var f = new RenderFragment(builder =>
                        {
                            builder.OpenComponent(0, item.Property.PropertyType);
                            builder.CloseComponent();
                        });

                    @f
                }
            </CardBody>
        </Card>
    }
}


<Modal @ref="@ModalRef"></Modal>