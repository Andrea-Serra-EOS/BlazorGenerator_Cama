@{
    var PageActions = AttributesUtils.getMethodsWithAttribute<PageAction>(this);
    var Subforms = AttributesUtils.getPropertiesWithAttribute<Subform>(this);
}
@typeparam T

<Layout>
    <LayoutHeader>
        <ActionBar T="@T" PageActions="@PageActions" Context="this"></ActionBar>
    </LayoutHeader>
    <LayoutContent>
        <Card Margin="Margin.Is4.FromBottom">
            <CardHeader>
                <CardTitle>Form Row</CardTitle>
            </CardHeader>
            <CardBody>
                <Fields>
                    @foreach (var fld in VisibleFields)
                    {
                        <Field ColumnSize="ColumnSize.Is6.OnDesktop" Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is4">@(fld.Caption): </FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is8">
                                @switch (fld.Type)
                                {
                                    case Generator.Enum.FieldType.Numeric:
                                        <NumericEdit Value="@(fld.Getter(Data))"
                                                     @onchange="@((e) => { fld.Setter(Data, e.Value); })"
                                                     Placeholder="@fld.Caption"
                                                     ReadOnly="@(!fld.Editable)" />
                                        break;
                                    case Generator.Enum.FieldType.Boolean:
                                        <Check TValue="bool"
                                               Checked="@((bool)fld.Getter(Data))"
                                               ReadOnly="@(!fld.Editable)" />
                                        break;
                                    default:
                                        <TextEdit Text="@((string) fld.Getter(Data))"
                                                  @onchange="@((e) => { fld.Setter(Data, e.Value); })"
                                                  Placeholder="@fld.Caption"
                                                  ReadOnly="@(!fld.Editable)" />
                                        break;
                                }
                            </FieldBody>
                        </Field>
                    }
                </Fields>
            </CardBody>
        </Card>
    </LayoutContent>
</Layout>


@{
    foreach (var item in Subforms)
    {
        <Card Margin="Margin.Is4.FromBottom">
            <CardHeader>
                <CardTitle>@item.Attribute.Caption</CardTitle>
            </CardHeader>
            <CardBody>
                @{var f = new RenderFragment(builder =>
                    {
                        builder.OpenComponent(0, item.Property.PropertyType);
                        builder.CloseComponent();
                    });

                    @f
                }
            </CardBody>
        </Card>
    }
}
